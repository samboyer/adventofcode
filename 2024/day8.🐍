"""
☀8️⃣❕
"""

🧼 = sorted
🖨 = print
🤐 = zip
👆 = abs
✅ = True
❌ = False

🛺 = min
🚛 = max
📏 = len
👩‍🌾 = range
🗺 = map
⛓ = list
🎒 = set
🪓 = lambda ⭐, ✨: ⭐.split(✨)
📥 = lambda ⛓, ✨: ⛓.append(✨)
📥🎒 = lambda 🎒, ✨: 🎒.add(✨)

0️⃣ = 0
1️⃣ = 1
2️⃣ = 2
3️⃣ = 3
4️⃣ = 4
5️⃣ = 5
6️⃣ = 6
7️⃣ = 7
8️⃣ = 8
9️⃣ = 9
🔟 = 10

def 🔢(✖): return int(✖)

def 👓(✏):
    return [🚣‍♂️.strip() for 🚣‍♂️ in open(✏).readlines() if 🚣‍♂️.strip()]

def 👓🤏(✏):
    return open(✏).read()


# 🟩🟩🟩🅿1️⃣🟩🟩🟩

def 🔎🗼(🧾, 🌊):
    global 👩‍🌾, 📏, 📥

    🎁 = []
    for ↕ in 👩‍🌾(📏(🧾)):
        for ↔ in 👩‍🌾(📏(🧾[↕])):
            if 🧾[↕][↔] == 🌊:
                📥(🎁, (↔, ↕))
    return 🎁


def ➕(🅰,🅱):
    global 0️⃣,1️⃣
    return (🅰[0️⃣] + 🅱[0️⃣], 🅰[1️⃣] + 🅱[1️⃣])

def ➖(🅰,🅱):
    global 0️⃣,1️⃣
    return (🅰[0️⃣] - 🅱[0️⃣], 🅰[1️⃣] - 🅱[1️⃣])

def ✖(🅰, ❌):
    global 0️⃣,1️⃣
    return (🅰[0️⃣] * ❌,  🅰[1️⃣] * ❌)

def 📥❓(🙃⭕🎒, 🙃⭕, 📏↕, 📏↔):
    global 0️⃣,1️⃣,📥🎒
    if (
        🙃⭕[0️⃣] >= 0️⃣
        and 🙃⭕[0️⃣] < 📏↔
        and 🙃⭕[1️⃣] >= 0️⃣
        and 🙃⭕[1️⃣] < 📏↕):
        📥🎒(🙃⭕🎒,🙃⭕)

🧾 = 👓('input/8️⃣.txt')

📏↕ = 📏(🧾)
📏↔ = 📏(🧾[0️⃣])


🙃⭕🎒 = 🎒()

🌊⛓ = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

for 🌊 in 🌊⛓:
    🗼⛓ = 🔎🗼(🧾, 🌊)
    for 👇🅰 in 👩‍🌾(📏(🗼⛓)):
        for 👇🅱 in 👩‍🌾(👇🅰+1,📏(🗼⛓)):
            🅰 = 🗼⛓[👇🅰]
            🅱 = 🗼⛓[👇🅱]
            # find antinodes
            🅰➡🅱 = ➖(🅱, 🅰)

            🙃⭕0️⃣ = ➖(🅰, 🅰➡🅱)
            🙃⭕1️⃣ = ➕(🅱, 🅰➡🅱)

            📥❓(🙃⭕🎒, 🙃⭕0️⃣, 📏↕, 📏↔)
            📥❓(🙃⭕🎒, 🙃⭕1️⃣, 📏↕, 📏↔)

🎉 = 📏(🙃⭕🎒)
🖨(🎉)