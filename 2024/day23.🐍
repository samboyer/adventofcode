"""
☀2️⃣3️⃣❕
"""

🧼 = sorted
🖨 = print
🤐 = zip
👆 = abs
✅ = True
❌ = False

🛺 = min
🚛 = max
📏 = len
👩‍🌾 = range
🗺 = map
➕ = sum
⛓ = list
🎒 = set
✒️  = lambda ✖: str(✖)
🪓 = lambda ⭐, ✨: ⭐.split(✨)
📥 = lambda ⛓, ✨: ⛓.append(✨)
📥🎒 = lambda 🎒, ✨: 🎒.add(✨)
🔢 = lambda ✖: int(✖)
⏯⭐❓ = lambda ⭐, ✨: ⭐.startswith(✨)

0️⃣ = 0; 1️⃣ = 1; 2️⃣ = 2; 3️⃣ = 3; 4️⃣ = 4; 5️⃣ = 5;
6️⃣ = 6; 7️⃣ = 7; 8️⃣ = 8; 9️⃣ = 9; 🔟 = 10
2️⃣5️⃣ = 25; 7️⃣5️⃣ = 75; 2️⃣0️⃣2️⃣4️⃣ = 2024; 💯 = 100;
1️⃣2️⃣ = 12; 7️⃣0️⃣ = 70; 1️⃣0️⃣2️⃣4️⃣ = 1024;
1️⃣6️⃣7️⃣7️⃣7️⃣2️⃣1️⃣6️⃣ = 16777216;
6️⃣4️⃣ = 64; 3️⃣2️⃣ = 32; 2️⃣0️⃣4️⃣8️⃣ = 2048;
2️⃣0️⃣0️⃣0️⃣ = 2000;

def 👓(✏):
    return [🚣‍♂️.strip() for 🚣‍♂️ in open(✏).readlines() if 🚣‍♂️.strip()]

def 👓🤏(✏):
    return open(✏).read()

def 💉(⭐, ↔, ✨):
    global 1️⃣
    return ⭐[:↔] + ✨ + ⭐[↔ + 1️⃣:]

# 🟩🟩🟩🅿1️⃣🟩🟩🟩

def 🥄(🅰,🅱):
    return 🅰 ^ 🅱

def ✂(🅰):
    global 1️⃣6️⃣7️⃣7️⃣7️⃣2️⃣1️⃣6️⃣
    return 🅰 % 1️⃣6️⃣7️⃣7️⃣7️⃣2️⃣1️⃣6️⃣

def 🧬(🔑):
    global ✂, 🥄, 6️⃣4️⃣, 3️⃣2️⃣, 2️⃣0️⃣4️⃣8️⃣
    🔑 = ✂(🥄(🔑, 🔑 * 6️⃣4️⃣))
    🔑 = ✂(🥄(🔑, 🔑 // 3️⃣2️⃣))
    🔑 = ✂(🥄(🔑, 🔑 * 2️⃣0️⃣4️⃣8️⃣))
    return 🔑


# 🧾 =👓('input/23.example.txt')
🧾 = 👓('input/23.txt')

💻🚡📕 = {}

for 🚡 in 🧾:
    💻🅰, 💻🅱 = 🪓(🚡, '-')
    if 💻🅰 not in 💻🚡📕:
        💻🚡📕[💻🅰] = [💻🅱]
    else:
        📥(💻🚡📕[💻🅰], 💻🅱)
    if 💻🅱 not in 💻🚡📕:
        💻🚡📕[💻🅱] = [💻🅰]
    else:
        📥(💻🚡📕[💻🅱], 💻🅰)

💻📐🎒 = 🎒()

🎉 = 0️⃣
for 💻🅰 in 💻🚡📕:
    if not ⏯⭐❓(💻🅰, 't'):
        continue
    for 💻🅱 in 💻🚡📕[💻🅰]:
        for 💻© in 💻🚡📕[💻🅰]:
            if 💻© in 💻🚡📕[💻🅱]:
                💻📐 = 🧼([💻🅰, 💻🅱, 💻©])
                📥🎒(💻📐🎒, ✒️(💻📐))

🎉 = 📏(💻📐🎒)
🖨(🎉)
