"""
☀1️⃣5️⃣❕
"""

🧼 = sorted
🖨 = print
🤐 = zip
👆 = abs
✅ = True
❌ = False

🛺 = min
🚛 = max
📏 = len
👩‍🌾 = range
🗺 = map
➕ = sum
⛓ = list
🎒 = set
✒️  = lambda ✖: str(✖)
🪓 = lambda ⭐, ✨: ⭐.split(✨)
📥 = lambda ⛓, ✨: ⛓.append(✨)
📥🎒 = lambda 🎒, ✨: 🎒.add(✨)
🔢 = lambda ✖: int(✖)

0️⃣ = 0; 1️⃣ = 1; 2️⃣ = 2; 3️⃣ = 3; 4️⃣ = 4; 5️⃣ = 5;
6️⃣ = 6; 7️⃣ = 7; 8️⃣ = 8; 9️⃣ = 9; 🔟 = 10
2️⃣5️⃣ = 25; 7️⃣5️⃣ = 75; 2️⃣0️⃣2️⃣4️⃣ = 2024; 💯 = 100;


def 👓(✏):
    return [🚣‍♂️.strip() for 🚣‍♂️ in open(✏).readlines() if 🚣‍♂️.strip()]

def 👓🤏(✏):
    return open(✏).read()

def 💉(⭐, ↔, ✨):
    global 1️⃣
    return ⭐[:↔] + ✨ + ⭐[↔ + 1️⃣:]

# 🟩🟩🟩🅿1️⃣🟩🟩🟩

# 🧾 = 👓🤏('input/15.example.txt')
🧾 = 👓🤏('input/15.txt')

🏭🧾, 🎬🧾 = 🪓(🧾, '\n\n')
🎬🧾 = 🎬🧾.replace('\n','')
🏭 = 🪓(🏭🧾,'\n')

📏🏭↕ = 📏(🏭)
📏🏭↔ = 📏(🏭[0️⃣])

for ↕ in 👩‍🌾(📏🏭↕):
    try:
        ↔ = 🏭[↕].index('@')
        🤖↔, 🤖↕ = (↔, ↕)
        break
    except:
        pass

🧭 = {
    '<': (- 1️⃣, 0️⃣),
    '>': (1️⃣, 0️⃣),
    '^': (0️⃣, - 1️⃣),
    'v': (0️⃣, 1️⃣)
}


def 🛒(📦↔, 📦↕, ➡):
    global 🏭, 🛒,0️⃣,1️⃣,💉,✅,❌

    📦 = 🏭[📦↕][📦↔]

    🆕📦↔, 🆕📦↕ = 📦↔ + ➡[0️⃣], 📦↕ + ➡[1️⃣]
    if 🏭[🆕📦↕][🆕📦↔] == '.':
        🏭[🆕📦↕] = 💉(🏭[🆕📦↕], 🆕📦↔, 📦)
        🏭[📦↕] = 💉(🏭[📦↕], 📦↔, '.')
        return ✅

    elif 🏭[🆕📦↕][🆕📦↔] == '#':
        return ❌

    elif 🛒(🆕📦↔, 🆕📦↕, ➡):
        🏭[🆕📦↕] = 💉(🏭[🆕📦↕], 🆕📦↔, 📦)
        🏭[📦↕] = 💉(🏭[📦↕], 📦↔, '.')
        return ✅
    else:
        return ❌

for 🎬 in 🎬🧾:
    ➡ = 🧭[🎬]
    if 🛒(🤖↔, 🤖↕, ➡):
        🤖↔, 🤖↕ = 🤖↔ + ➡[0️⃣], 🤖↕ + ➡[1️⃣]

🎉 = 0️⃣
for ↕ in 👩‍🌾(📏🏭↕):
    for ↔ in 👩‍🌾(📏🏭↔):
        if 🏭[↕][↔] == 'O':
            🎉 += ↕ * 100 + ↔

🖨(🎉)